.Wrapper {
  display: grid;
  justify-content: start;
  align-items: start;

  /*
    We’d naturally use `gap: var(--x-spacing-tight1x)`, but Autoprefixer
    has an issue where it won’t transform both the grid and custom property
    syntax. This leaves custom properties in the fallback grid declaration,
    which causes it to be ignored. Once this issue is fixed:
    https://github.com/csstools/postcss-preset-env/issues/180
    we will be able to use the gap property as expected.
  */
  grid-template: 'checkbox gap label' auto / auto var(--x-spacing-tight1x) auto;
}

.hasError {
  grid-template:
    'checkbox gap label' auto
    'row-gap row-gap row-gap' var(--x-spacing-tight1x)
    'error error error' auto /
    auto var(--x-spacing-tight1x) auto;
}

.Checkbox {
  position: relative;
  margin-top: -1px;
  grid-area: checkbox;
}

.Input {
  --input-border-color: var(--x-default-color-border);
  background-clip: padding-box;
  border: 1px transparent solid;
  border-radius: var(
    --x-checkbox-border-radius,
    var(--x-control-border-radius, var(--x-global-border-radius))
  );
  box-sizing: content-box;
  cursor: pointer;
  display: block;
  width: em(18px);
  height: em(18px);
  box-shadow: 0 0 0 1px var(--input-border-color) inset;
  transition: box-shadow var(--duration--base) var(--timing--base);

  &:focus {
    box-shadow: 0 0 0 2px var(--x-color-interactive-text) inset;
  }

  &:checked {
    box-shadow: 0 0 0 em(10px) var(--x-color-interactive-text) inset;

    & + .Icon {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  &.Input-hasError:not(:checked) {
    box-shadow: 0 0 0 em(2px) var(--field--border-color--error) inset;
  }
}

.Input-backgroundTransparent {
  background-color: transparent;
}

.Input-backgroundSurfacePrimary {
  background-color: var(--x-color-surface-primary);
}

.Input-backgroundSurfaceSecondary {
  background-color: var(--x-color-surface-secondary);
}

.Input-backgroundSurfaceTertiary {
  background-color: var(--x-color-surface-tertiary);
}

.Input-borderColorEmphasized {
  --input-border-color: var(--x-default-color-border-emphasized);
}

.Input-isDisabled {
  opacity: 0.7;
  cursor: default;

  &.Input-backgroundSurfacePrimary {
    background-color: var(--x-color-surface-primary-disabled);
  }

  &.Input-backgroundSurfaceSecondary {
    background-color: var(--x-color-surface-secondary-disabled);
  }

  &.Input-backgroundSurfaceTertiary {
    background-color: var(--x-color-surface-tertiary-disabled);
  }
}

.Label {
  display: block;
  max-width: 100%;
  cursor: pointer;
  grid-area: label;
}

.Label-isDisabled {
  cursor: default;
}

.Error {
  grid-area: error;
}

.Icon {
  color: var(--x-color-interactive-icon);
  pointer-events: none;
  opacity: 0;
  transform-origin: center;
  transform: translate(-50%, -50%);
  position: absolute;
  top: 50%;
  left: 50%;
  transition: all var(--duration--base) var(--timing--base) 100ms;
}
